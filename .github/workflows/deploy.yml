name: Deploy to DigitalOcean App Platform

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  REGISTRY: registry.digitalocean.com
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install Python dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio httpx

      - name: Install Node.js dependencies
        run: |
          cd frontend
          npm ci

      - name: Run backend tests
        run: |
          cd backend
          pytest tests/ -v

      - name: Run frontend tests
        run: |
          cd frontend
          npm test -- --watchAll=false --coverage

      - name: Build frontend
        run: |
          cd frontend
          npm run build

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Deploy to DigitalOcean App Platform
        run: |
          # Get the app ID from environment or use a specific one
          APP_ID=${{ secrets.DIGITALOCEAN_APP_ID }}
          
          if [ -z "$APP_ID" ]; then
            echo "Error: DIGITALOCEAN_APP_ID secret is not set"
            exit 1
          fi
          
          # Deploy the app
          doctl apps update $APP_ID --spec .do/app.yaml
          
          # Wait for deployment to complete
          echo "Waiting for deployment to complete..."
          doctl apps wait-for-deployment $APP_ID
          
          # Get app info
          doctl apps get $APP_ID

      - name: Run database migrations
        run: |
          APP_ID=${{ secrets.DIGITALOCEAN_APP_ID }}
          
          # Wait a bit for the app to be fully ready
          sleep 30
          
          # Run database migrations
          doctl apps run $APP_ID --command "alembic upgrade head"
          
          echo "Database migrations completed"

      - name: Health check
        run: |
          APP_ID=${{ secrets.DIGITALOCEAN_APP_ID }}
          
          # Get the app URL
          APP_URL=$(doctl apps get $APP_ID --format URL --no-header)
          
          # Wait for health check to pass
          echo "Performing health check on $APP_URL"
          
          # Try health check for up to 5 minutes
          for i in {1..30}; do
            if curl -f "$APP_URL/health" > /dev/null 2>&1; then
              echo "Health check passed!"
              break
            fi
            echo "Health check attempt $i failed, retrying in 10 seconds..."
            sleep 10
          done
          
          # Final health check
          if ! curl -f "$APP_URL/health" > /dev/null 2>&1; then
            echo "Health check failed after all attempts"
            exit 1
          fi

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Deployment successful!"
            echo "App URL: $(doctl apps get ${{ secrets.DIGITALOCEAN_APP_ID }} --format URL --no-header)"
          else
            echo "❌ Deployment failed!"
            exit 1
          fi
