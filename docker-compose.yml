version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: iso22000_postgres
    environment:
      POSTGRES_DB: iso22000_fsms
      POSTGRES_USER: iso22000_user
      POSTGRES_PASSWORD: iso22000_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U iso22000_user -d iso22000_fsms"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - iso22000_network

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: iso22000_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - iso22000_network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: iso22000_backend
    environment:
      - DATABASE_URL=postgresql://iso22000_user:iso22000_password@postgres:5432/iso22000_fsms
      - DATABASE_TYPE=postgresql
      - SECRET_KEY=your-super-secret-key-change-this-in-production
      - ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      - REFRESH_TOKEN_EXPIRE_DAYS=7
      - APP_NAME=ISO 22000 FSMS
      - APP_VERSION=1.0.0
      - DEBUG=False
      - ENVIRONMENT=production
      - ALLOWED_ORIGINS=["http://localhost:3000", "http://localhost:8080"]
      - ALLOWED_CREDENTIALS=True
      - MAX_FILE_SIZE=10485760
      - ALLOWED_FILE_TYPES=pdf,doc,docx,xls,xlsx,ppt,pptx,jpg,jpeg,png,gif
      - ENABLE_EMAIL_NOTIFICATIONS=False
      - LOG_LEVEL=INFO
      - LOG_FORMAT=json
      - BACKUP_ENABLED=True
      - BACKUP_RETENTION_DAYS=30
      - RATE_LIMIT_PER_MINUTE=100
    ports:
      - "8000:8000"
    volumes:
      - backend_uploads:/app/uploads
      - backend_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - iso22000_network
    restart: unless-stopped

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: iso22000_frontend
    environment:
      - REACT_APP_API_URL=/api/v1
      - REACT_APP_ENV=production
      - REACT_APP_DEBUG=false
    ports:
      - "8080:80"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - iso22000_network
    restart: unless-stopped

  # Nginx Reverse Proxy (optional - for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: iso22000_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - iso22000_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_uploads:
    driver: local
  backend_logs:
    driver: local

networks:
  iso22000_network:
    driver: bridge

